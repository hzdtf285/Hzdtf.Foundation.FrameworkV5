<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hzdtf.Utility.AspNet</name>
    </assembly>
    <members>
        <member name="T:Hzdtf.Utility.AspNet.Config.ConfigSourceType">
            <summary>
            配置来源类型
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Config.ConfigSourceType.JSON_FILE">
            <summary>
            JSON文件
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Config.ConfigSourceType.MICROSOFT_CONFIGURATION">
            <summary>
            微软配置
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AspNet.Config.JsonFileMicrosoftConfigurationBase`1">
            <summary>
            Json文件微软配置基类
            @ 黄振东
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Config.JsonFileMicrosoftConfigurationBase`1.configuration">
            <summary>
            配置
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Config.JsonFileMicrosoftConfigurationBase`1.beforeConfigurationBuilder">
            <summary>
            配置生成前回调
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Config.JsonFileMicrosoftConfigurationBase`1.#ctor(System.String,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Object})">
            <summary>
            构造方法
            </summary>
            <param name="jsonFile">json文件</param>
            <param name="beforeConfigurationBuilder">配置生成前回调</param>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Config.JsonFileMicrosoftConfigurationBase`1.#ctor(`0,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Object})">
            <summary>
            构造方法
            </summary>
            <param name="data">数据</param>
            <param name="beforeConfigurationBuilder">配置生成前回调</param>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Config.JsonFileMicrosoftConfigurationBase`1.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Config.JsonFileMicrosoftConfigurationBase`1.WriteToStorage(`0)">
            <summary>
            写入到存储里
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleMiddleware">
            <summary>
            API异常处理中间件
            只有对路径是从传过来的配置前辍才处理
            会对下一个中间件捕获异常，如果发生异常，会返回BasicReturnInfo对象
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleMiddleware.next">
            <summary>
            下一个中间件处理委托
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleMiddleware.options">
            <summary>
            Api异常处理选项配置
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleMiddleware.log">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleOptions},Hzdtf.Logger.Contract.ILogable)">
            <summary>
            构造方法
            </summary>
            <param name="next">下一个中间件处理委托</param>
            <param name="options">Api异常处理选项配置</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行
            </summary>
            <param name="context">http上下文</param>
            <returns>任务</returns>
        </member>
        <member name="T:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleOptions">
            <summary>
            Api异常处理选项配置
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleOptions.IsDevelopment">
            <summary>
            是否开发环境
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleOptions.PfxApiPath">
            <summary>
            Api路径前辍，默认是/api/
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleOptions.Serialization">
            <summary>
            序列化，默认为Json
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleOptions.ExceptionCode">
            <summary>
            异常编码，默认为500
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleOptions.ExceptionMsg">
            <summary>
            异常消息，默认为“操作失败”
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleOptions.HttpStatusCode">
            <summary>
            Http状态码，默认返回200
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AspNet.Extensions.RemoteService.UnityServicesOptionsConfiguration">
            <summary>
            统一服务配置来自微软配置对象里
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Extensions.RemoteService.UnityServicesOptionsConfiguration.services">
            <summary>
            服务配置数组，目的是为了从配置里读取时，能将部分对象还原
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Extensions.RemoteService.UnityServicesOptionsConfiguration.syncServices">
            <summary>
            同步服务配置列表
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.RemoteService.UnityServicesOptionsConfiguration.#ctor(System.String,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Object})">
            <summary>
            构造方法
            </summary>
            <param name="jsonFile">json文件</param>
            <param name="beforeConfigurationBuilder">配置生成前回调</param>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.RemoteService.UnityServicesOptionsConfiguration.#ctor(Hzdtf.Utility.RemoteService.Options.UnityServicesOptions,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Object})">
            <summary>
            构造方法
            </summary>
            <param name="options">配置</param>
            <param name="beforeConfigurationBuilder">配置生成前回调</param>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.RemoteService.UnityServicesOptionsConfiguration.Reader">
            <summary>
            读取
            </summary>
            <returns>数据</returns>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.RemoteService.UnityServicesOptionsConfiguration.WriteToStorage(Hzdtf.Utility.RemoteService.Options.UnityServicesOptions)">
            <summary>
            写入到存储里
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.RemoteService.UnityServicesOptionsConfiguration.SetServiceOptions(Hzdtf.Utility.RemoteService.Options.ServicesOptions[])">
            <summary>
            设置服务配置数组
            </summary>
            <param name="services">服务配置数组</param>
        </member>
        <member name="T:Hzdtf.Utility.AspNet.Extensions.RequestLog.RequestLogMiddleware">
            <summary>
            请求日志中间件
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Extensions.RequestLog.RequestLogMiddleware.next">
            <summary>
            下一个中间件处理委托
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Extensions.RequestLog.RequestLogMiddleware.options">
            <summary>
            请求日志选项配置
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Extensions.RequestLog.RequestLogMiddleware.log">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.RequestLog.RequestLogMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Hzdtf.Utility.AspNet.Extensions.RequestLog.RequestLogOptions},Hzdtf.Logger.Contract.ILogable)">
            <summary>
            构造方法
            </summary>
            <param name="next">下一个中间件处理委托</param>
            <param name="options">请求日志选项配置</param>
            <param name="log">日志</param>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.RequestLog.RequestLogMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行
            </summary>
            <param name="context">http上下文</param>
            <returns>任务</returns>
        </member>
        <member name="T:Hzdtf.Utility.AspNet.Extensions.RequestLog.RequestLogOptions">
            <summary>
            请求日志选项
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.AspNet.Extensions.RequestLog.RequestLogOptions.LogLevel">
            <summary>
            日志等级，默认是Trace
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionMiddlewareBase">
            <summary>
            路由权限中间件基类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionMiddlewareBase.next">
            <summary>
            下一个中间件处理委托
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionMiddlewareBase.reader">
            <summary>
            读取API权限配置
            </summary>
        </member>
        <member name="F:Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionMiddlewareBase.options">
            <summary>
            API权限选项配置
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionMiddlewareBase.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Options.IOptions{Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionOptions},Hzdtf.Utility.Data.IReader{Hzdtf.Utility.ApiPermission.RoutePermissionInfo[]})">
            <summary>
            构造方法
            </summary>
            <param name="next">下一个中间件处理委托</param>
            <param name="options">路由权限选项配置</param>
            <param name="reader">读取API权限配置</param>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionMiddlewareBase.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            执行
            </summary>
            <param name="context">http上下文</param>
            <returns>任务</returns>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionMiddlewareBase.IsHavePermission(Hzdtf.Utility.ApiPermission.RoutePermissionInfo,Hzdtf.Utility.ApiPermission.RoutePermissionInfo.ActionInfo,Hzdtf.Utility.Model.Return.BasicReturnInfo)">
            <summary>
            判断是否拥有权限
            </summary>
            <param name="controller">控制器信息</param>
            <param name="action">动作信息</param>
            <param name="basicReturn">基本返回</param>
            <returns>获取是否拥有权限</returns>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionMiddlewareBase.NotPermissionHandle(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            无权限处理
            </summary>
            <param name="context">http上下文</param>
            <returns>任务</returns>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionMiddlewareBase.WriteContent(Microsoft.AspNetCore.Http.HttpContext,Hzdtf.Utility.Model.Return.BasicReturnInfo)">
            <summary>
            写入内容
            </summary>
            <param name="context">http上下文</param>
            <param name="basicReturn">基本返回</param>
            <returns>任务</returns>
        </member>
        <member name="T:Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionOptions">
            <summary>
            路由权限选项配置
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionOptions.PfxApiPath">
            <summary>
            Api路径前辍，默认是/api/
            </summary>
        </member>
        <member name="T:Hzdtf.Utility.AspNet.ModelValidate.ModelValidateActionFilter">
            <summary>
            模型验证动作过滤器
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.ModelValidate.ModelValidateActionFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            动作执行中
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.ModelValidate.ModelValidateActionFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            动作执行完
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="T:Hzdtf.Utility.AspNet.ModelValidate.NullObjectModelValidator">
            <summary>
            对象可为null的模型验证
            @ 黄振东
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.ModelValidate.NullObjectModelValidator.Validate(Microsoft.AspNetCore.Mvc.ActionContext,Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary,System.String,System.Object)">
            <summary>
            验证
            </summary>
            <param name="actionContext">动作上下文</param>
            <param name="validationState">验证状态</param>
            <param name="prefix">前辍</param>
            <param name="model">模型</param>
        </member>
        <member name="T:Hzdtf.Utility.AspNet.WebApp">
            <summary>
            Web应用类
            @ 黄振东
            </summary>
        </member>
        <member name="P:Hzdtf.Utility.AspNet.WebApp.Instance">
            <summary>
            当前服务提供者实例
            </summary>
        </member>
        <member name="M:Hzdtf.Utility.AspNet.WebApp.GetServiceFromInstance``1">
            <summary>
            从当前服务提供者实例获取服务
            </summary>
            <typeparam name="T">服务类型</typeparam>
            <returns>服务</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.ApiExceptionHandleMiddlewareExtensions">
            <summary>
            Api异常处理中间件扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.ApiExceptionHandleMiddlewareExtensions.UseApiExceptionHandle(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用Api异常处理
            </summary>
            <param name="app">应用</param>
            <returns>应用</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.HashIpPortLoadBalanceMiddlewareExtensions">
            <summary>
            哈希+IP中间件拓展类
            @ 黄振东
            </summary>
        </member>
        <member name="F:Microsoft.AspNetCore.Builder.HashIpPortLoadBalanceMiddlewareExtensions.localPort">
            <summary>
            本地端口
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.HashIpPortLoadBalanceMiddlewareExtensions.UseHashIpPortLoadBalance(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Int32)">
            <summary>
            使用哈希+IP负载均衡
            </summary>
            <param name="app">应用生成器</param>
            <param name="port">端口</param>
            <returns>应用生成器</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.RequestLogMiddlewareExtensions">
            <summary>
            请求日志中间件扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.RequestLogMiddlewareExtensions.UseRequestLog(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用请求日志
            </summary>
            <param name="app">应用</param>
            <returns>应用</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Builder.RoutePermissionMiddlewareExtensions">
            <summary>
            路由权限中间件扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Builder.RoutePermissionMiddlewareExtensions.UseRoutePermission``1(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用路由权限，必须在UseRouting中间件后面执行
            </summary>
            <param name="app">应用</param>
            <returns>应用</returns>
        </member>
        <member name="T:Microsoft.AspNetCore.Http.HttpRequestExtensions">
            <summary>
            HTTP请求扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpRequestExtensions.GetBearerOriginTokenFromHeader(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            从请求头里获取原始的票据
            </summary>
            <param name="request">http请求</param>
            <returns>原始的票据</returns>
        </member>
        <member name="M:Microsoft.AspNetCore.Http.HttpRequestExtensions.GetContainerBearerOriginTokenFromHeader(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            从请求头里获取带有Bearer的票据
            </summary>
            <param name="request">http请求</param>
            <returns>带有Bearer的票据</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ApiExceptionHandleServiceExtensions">
            <summary>
            Api异常处理服务扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ApiExceptionHandleServiceExtensions.AddApiExceptionHandle(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Hzdtf.Utility.AspNet.Extensions.ExceptionHandle.ApiExceptionHandleOptions})">
            <summary>
            添加Api异常处理服务
            </summary>
            <param name="services">服务收藏</param>
            <param name="options">Api异常处理选项配置</param>
            <returns>服务收藏</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.HashIpPortLoadBalanceExtensions">
            <summary>
            哈希+IP负载均衡扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HashIpPortLoadBalanceExtensions.AddHashIpPortLoadBalance(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加哈希+IP负载均衡
            </summary>
            <param name="services">服务</param>
            <returns>服务</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.RegisterAssemblyExtensions">
            <summary>
            注册程序集扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RegisterAssemblyExtensions.RegisterAssembly(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            用DI批量注入接口程序集中对应的实现类。
            </summary>
            <param name="service">服务收藏</param>
            <param name="interfaceAssemblyName">接口程序集的名称（不包含文件扩展名）</param>
            <param name="implementAssemblyName">实现程序集的名称（不包含文件扩展名）</param>
            <param name="lifecycle">生命周期，默认为瞬时</param>
            <returns>服务收藏</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.UnityServicesBuilderExtensions">
            <summary>
            统一服务生成器扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnityServicesBuilderExtensions.AddUnityServicesBuilderCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions})">
            <summary>
            添加统一服务生成器缓存
            </summary>
            <param name="services">服务</param>
            <param name="options">配置回调</param>
            <returns>服务</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnityServicesBuilderExtensions.AddUnityServicesBuilderConfigure(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions},System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Object})">
            <summary>
            添加统一服务生成器微软配置
            </summary>
            <param name="services">服务</param>
            <param name="options">配置回调</param>
            <param name="beforeConfigBuilder">生成配置前回调</param>
            <returns>服务</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.UnityServicesBuilderExtensions.AddUnityServicesBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions,Hzdtf.Utility.RemoteService.Options.IUnityServicesOptions},System.Action{Hzdtf.Utility.RemoteService.UnitServiceBuilderOptions})">
            <summary>
            添加统一服务生成器
            </summary>
            <param name="services">服务</param>
            <param name="callbackServiceOptions">回调服务配置</param>
            <param name="options">配置回调</param>
            <returns>服务</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.RequestLogServiceExtensions">
            <summary>
            请求日志扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestLogServiceExtensions.AddRequestLog(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Hzdtf.Utility.AspNet.Extensions.RequestLog.RequestLogOptions})">
            <summary>
            添加请求日志服务
            </summary>
            <param name="services">服务收藏</param>
            <param name="options">请求日志选项配置</param>
            <returns>服务收藏</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.RoutePermissionServiceExtensions">
            <summary>
            路由权限扩展类
            @ 黄振东
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RoutePermissionServiceExtensions.AddRoutePermission(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Hzdtf.Utility.AspNet.Extensions.RoutePermission.RoutePermissionOptions})">
            <summary>
            添加路由权限服务
            </summary>
            <param name="services">服务收藏</param>
            <param name="options">路由权限选项配置</param>
            <returns>服务收藏</returns>
        </member>
    </members>
</doc>
